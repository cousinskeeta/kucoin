# -*- coding: utf-8 -*-
"""coinscraper_client

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K8KWmQqHK7YwnHB_1nTXWCppvU44Xpce
"""

# Commented out IPython magic to ensure Python compatibility.
import bs4
import requests
import pandas as pd
import time
import random
import math
import sqlite3
import numpy as np
from math import pi
import matplotlib.pyplot as plt
# %matplotlib inline
from bokeh.plotting import figure, output_file, show    
from google.colab import drive

class coinscrapper(object):
  save_as = None
  today = None
  base = 'https://coinmarketcap.com/currencies/'
  kucoin = 'https://coinmarketcap.com/exchanges/kucoin/'
  kucoin_list = None
  technical_data = []
  fundamental_data = []
  todays_RSI = []
  todays_price = []
  marketcaps = []
  volumes = []
  plots = []

  def __init__(self, save_as, today, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.save_as = save_as
    self.today = today
  
  def connect_googleDrive(self):
    drive.mount('drive', force_remount=True)

  def get_kc_list(self):
    df = pd.read_html('https://coinmarketcap.com/exchanges/kucoin/')
    self.kucoin_list = df[2]['Currency']
    return self.kucoin_list

  def lower(self, x):
    today = self.today
    base = self.base
    hist_endpoint = '/historical-data/' + f'?start=20200501&end={today}'
    link = x.lower().replace(' ','-')
    return base + link + hist_endpoint
  
  def convert_links(self):
    df = self.get_kc_list()
    return df.apply(lambda x: self.lower(x))

  def get_data(self):
    series = self.convert_links()
    time.sleep(random.uniform(3, 7))
    start = time.time()
    for idx, coins in enumerate(series):
      loop = time.time()
      print(idx+1,"out of ", len(series))
      try:
        data = pd.read_html(coins)
        self.technical_data.append(data[2])
        self.fundamental_data.append(data[3])
        time.sleep(random.uniform(3, 7))
        elapsed = loop - start
        print(round(elapsed/60,2), 'minutes elapsed...')
      except:
        self.technical_data.append("Error")
        self.fundamental_data.append("Error")
        time.sleep(random.uniform(3, 7))
        print(round(elapsed/60,2), 'minutes elapsed...')

  def computeRSI (self, data, time_window):
    diff = data.diff(1).dropna()  
    up_chg = 0 * diff
    down_chg = 0 * diff
    up_chg[diff > 0] = diff[ diff>0 ]
    down_chg[diff < 0] = diff[ diff < 0 ]
    up_chg_avg   = up_chg.ewm(com=time_window-1 , min_periods=time_window).mean()
    down_chg_avg = down_chg.ewm(com=time_window-1 , min_periods=time_window).mean()
    rs = abs(up_chg_avg/down_chg_avg)
    rsi = 100 - 100/(1+rs)
    return rsi

  def preprocess(self, data):
    data['date_'] = pd.to_datetime(data['Date'])
    data.index = pd.DatetimeIndex(data['date_'])
    data.sort_index(ascending=True, inplace=True)
    return data

  def get_rsi_data(self):
    if len(self.technical_data) < 1:
      self.get_data()
    tech_data = self.technical_data
    
    for i in tech_data:
      x = preprocess(i)
      try:
        print(x.columns)
        x['RSI'] = computeRSI(x['Close**'], 14)
        r = list(x['RSI'])[-1]
        self.todays_RSI.append(r)
        self.todays_price.append(list(x['Close**'])[-1])
        print(r)
        print(x.columns)
      except:
        self.todays_price.append('Error')
        self.todays_RSI.append('Error')
        print('Error')

  def plot_rsi_data(self):
    if len(self.technical_data) < 1:
      self.get_data()
    if len(self.todays_RSI) < 1:
      self.get_rsi_data()
    for i, j in zip(self.technical_data, self.kucoin_list):
      test = i
      r = list(test['RSI'])[-1]
      print(f'Plotting RSI ({r}) for: ', f'{j}')
      plt.figure(figsize=(40,9))
      plt.plot(test.index[-14:],test.RSI[-14:])
      plt.title(f'{j}'+"-Current-RSI-"+str(r))
      plt.hlines(80,xmin=test.index[-14:].min(),  xmax=test.index[-14:].max(),colors='k', label='80')
      plt.hlines(70,xmin=test.index[-14:].min(),  xmax=test.index[-14:].max(),colors='r', label='70', linestyles='dashdot')
      plt.hlines(30,xmin=test.index[-14:].min(),  xmax=test.index[-14:].max(),colors='g', label='30', linestyles='dashdot')
      plt.hlines(20,xmin=test.index[-14:].min(),  xmax=test.index[-14:].max(),colors='b', label='20')
      plt.xlabel('Date')
      plt.ylabel('RSI_14')
      plt.legend()
      plt.show();
      plt.savefig(f'drive/My Drive/CoinScraper/charts/{j}.png', dpi=72)
      self.plots.append(plt)

  def save_candlesticks(self):
    if len(self.technical_data) < 1:
      self.get_data()
    if len(self.plots) < 1:
      self.plot_rsi_data()
    for i, j in zip(self.technical_data, self.kucoin_list):
      df = i
      inc = df['Close**'] > df['Open*']
      dec = df['Open*'] > df['Close**']
      w = 12*60*60*1000 # half day in ms
      TOOLS = "pan,wheel_zoom,box_zoom,reset,save"
      p = figure(x_axis_type="datetime", tools=TOOLS, plot_width=1000, title = "{j} Price Chart")
      p.xaxis.major_label_orientation = pi/4
      p.grid.grid_line_alpha=0.3
      p.segment(df.index, df['High'], df.index, df['Low'], color="black")
      p.vbar(df.index[inc], w, df['Open*'][inc], df['Close**'][inc], fill_color="#D5E1DD", line_color="black")
      p.vbar(df.index[dec], w, df['Open*'][dec], df['Close**'][dec], fill_color="#F2583E", line_color="black")
      output_file(f"drive/My Drive/CoinScraper/charts/{j}/{j}.html", title="candlestick.py example")
      show(p)  # open a browser

  def pull_fundamentals(self):
    if len(self.fundamental_data) < 1:
      self.get_data()
    if len(self.todays_RSI) < 1:
      self.get_rsi_data()
    fund = fundamental_data[0]
    for i in fund:
      marketcap = i.set_index(0).stack()[3]
      volume = i.set_index(0).stack()[4]
      self.marketcaps.append(marketcap)
      self.volumes.append(volume)
      
  def load_images():
    pass


  def summarize(self):
    if len(self.fundamental_data) < 1:
      self.pull_fundamentals()
    if len(self.todays_RSI) < 1:
      self.get_rsi_data()
    results = pd.Dataframe()
    results['Date'] = self.today
    results['Asset'] = self.kucoin_list
    results['MarketCap'] = self.marketcaps
    results['Volume'] = self.volumes
    results['RSI'] = self.todays_RSI
    results['Price'] = self.todays_price
    results.sort_values(by='RSI', axis=1, inplace=True)
    # results['Plots']
    results.to_csv('drive/My Drive/CoinScraper/summary.csv')
    return results